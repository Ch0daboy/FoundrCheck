{"version":3,"file":"app/api/ideas/[id]/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./lib/sanitize.ts","webpack://_N_E/./app/api/ideas/[id]/route.ts","webpack://_N_E/./app/api/ideas/[id]/route.ts?e49c","webpack://_N_E/?cc57","webpack://_N_E/./lib/env.ts","webpack://_N_E/./lib/lucia.ts"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","export type IdeaRow = {\n  id: string;\n  owner_id: string;\n  title: string;\n  description: string;\n  idea_hash: string;\n  visibility: string;\n  status: string;\n  score: number | null;\n  analysis_summary: string | null;\n  analysis_raw: string | null;\n  created_at: string;\n  updated_at: string;\n};\n\nexport function sanitizeIdea(row: IdeaRow, viewerId: string | null) {\n  const isOwner = viewerId && row.owner_id === viewerId;\n  return {\n    id: row.id,\n    owner_id: isOwner ? row.owner_id : undefined,\n    title: row.title,\n    description: row.description,\n    idea_hash: isOwner ? row.idea_hash : undefined,\n    visibility: row.visibility,\n    status: row.status,\n    score: row.score,\n    analysis_summary: row.analysis_summary,\n    analysis_raw: isOwner ? row.analysis_raw : undefined,\n    created_at: row.created_at,\n    updated_at: row.updated_at,\n    owner_anon: !isOwner,\n  };\n}\n\n\n","import { validateRequest } from \"@/lib/lucia\";\nimport { sanitizeIdea } from \"@/lib/sanitize\";\nimport { env as getEnv } from \"@/lib/env\";\n\nexport const runtime = \"edge\";\n\nexport async function GET(_req: Request, ctx: { params: { id: string } }) {\n  const env = getEnv();\n  const id = ctx.params.id;\n  const { user } = await validateRequest(env, _req);\n  const viewerId = user?.id ?? null;\n\n  const res = await env.DB.prepare(`SELECT * FROM ideas WHERE id = ?`).bind(id).all();\n  if (!res.results?.length) return new Response(\"Not found\", { status: 404 });\n  const row = res.results[0] as any;\n  const sanitized = sanitizeIdea(row, viewerId);\n  return new Response(JSON.stringify(sanitized), { status: 200 });\n}\n\n\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/home/noob/FoundrCheck/app/api/ideas/[id]/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/ideas/[id]/route\",\n        pathname: \"/api/ideas/[id]\",\n        filename: \"route\",\n        bundlePath: \"app/api/ideas/[id]/route\"\n    },\n    resolvedPagePath: \"/home/noob/FoundrCheck/app/api/ideas/[id]/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/ideas/[id]/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fideas%2F%5Bid%5D%2Froute&page=%2Fapi%2Fideas%2F%5Bid%5D%2Froute&pagePath=private-next-app-dir%2Fapi%2Fideas%2F%5Bid%5D%2Froute.ts&appDir=%2Fhome%2Fnoob%2FFoundrCheck%2Fapp&appPaths=%2Fapi%2Fideas%2F%5Bid%5D%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/ideas/[id]/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","import { getRequestContext } from \"@cloudflare/next-on-pages\";\n\nexport type Bindings = {\n  DB: D1Database;\n  IDEA_QUEUE: Queue;\n  PERPLEXITY_API_KEY: string;\n  PERPLEXITY_MODEL: string;\n  APP_TIMEZONE?: string;\n  RATE_LIMIT_DAILY?: string | number;\n  TURNSTILE_SECRET_KEY?: string;\n  NEXT_PUBLIC_TURNSTILE_SITE_KEY?: string;\n};\n\nexport function env(): Bindings {\n  return getRequestContext().env as unknown as Bindings;\n}\n\n\n","import { Lucia, TimeSpan } from \"lucia\";\nimport { D1Adapter } from \"@lucia-auth/adapter-sqlite\";\nimport type { Bindings } from \"@/lib/env\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Simple SHA-256 hashing for edge runtime compatibility\nasync function hashPassword(password: string): Promise<string> {\n  const data = new TextEncoder().encode(password);\n  const digest = await crypto.subtle.digest(\"SHA-256\", data);\n  const bytes = Array.from(new Uint8Array(digest));\n  return bytes.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\nasync function verifyPassword(hashedPassword: string, password: string): Promise<boolean> {\n  const hashed = await hashPassword(password);\n  return hashed === hashedPassword;\n}\n\nexport function createLucia(env: Bindings) {\n  const adapter = new D1Adapter(env.DB, { user: \"user\", session: \"session\" });\n  const lucia = new Lucia(adapter, {\n    sessionExpiresIn: new TimeSpan(30, \"d\"),\n    sessionCookie: {\n      name: \"fc_session\",\n      attributes: {\n        sameSite: \"lax\",\n        secure: true,\n        path: \"/\",\n      },\n    },\n  });\n  return lucia;\n}\n\nexport async function validateRequest(env: Bindings, req: Request) {\n  const lucia = createLucia(env);\n  const cookieHeader = req.headers.get(\"cookie\") ?? \"\";\n  const sessionId = lucia.readSessionCookie(cookieHeader);\n  if (!sessionId) return { user: null, session: null } as const;\n  return await lucia.validateSession(sessionId);\n}\n\nexport async function registerWithEmailPassword(env: Bindings, email: string, password: string) {\n  // Ensure email not taken\n  const exists = await env.DB.prepare(\"SELECT id FROM user WHERE email = ?\").bind(email).first();\n  if (exists) throw new Error(\"EMAIL_TAKEN\");\n\n  const userId = uuidv4();\n  await env.DB.prepare(\"INSERT INTO user (id, email) VALUES (?, ?)\").bind(userId, email).run();\n\n  const hashedPassword = await hashPassword(password);\n  const keyId = `email:${email}`;\n  await env.DB.prepare(\"INSERT INTO key (id, user_id, hashed_password) VALUES (?, ?, ?)\")\n    .bind(keyId, userId, hashedPassword)\n    .run();\n\n  await env.DB.prepare(\"INSERT OR IGNORE INTO user_profiles (id, email) VALUES (?, ?)\").bind(userId, email).run();\n\n  const lucia = createLucia(env);\n  const session = await lucia.createSession(userId, {});\n  const cookie = lucia.createSessionCookie(session.id).serialize();\n  return { userId, cookie } as const;\n}\n\nexport async function loginWithEmailPassword(env: Bindings, email: string, password: string) {\n  const keyId = `email:${email}`;\n  const row = await env.DB.prepare(\"SELECT user_id, hashed_password FROM key WHERE id = ?\")\n    .bind(keyId)\n    .first<{ user_id: string; hashed_password: string }>();\n  if (!row) throw new Error(\"INVALID_CREDENTIALS\");\n\n  const ok = await verifyPassword(row.hashed_password, password);\n  if (!ok) throw new Error(\"INVALID_CREDENTIALS\");\n\n  const lucia = createLucia(env);\n  const session = await lucia.createSession(row.user_id, {});\n  const cookie = lucia.createSessionCookie(session.id).serialize();\n  return { userId: row.user_id, cookie } as const;\n}\n\nexport async function logout(env: Bindings, req: Request) {\n  const lucia = createLucia(env);\n  const cookieHeader = req.headers.get(\"cookie\") ?? \"\";\n  const sessionId = lucia.readSessionCookie(cookieHeader);\n  if (sessionId) await lucia.invalidateSession(sessionId);\n  const blank = lucia.createBlankSessionCookie().serialize();\n  return blank;\n}\n\n\n"],"names":["module","exports","require","runtime","GET","_req","ctx","env","getEnv","id","params","user","validateRequest","viewerId","res","DB","prepare","bind","all","results","length","Response","JSON","stringify","sanitizeIdea","row","isOwner","owner_id","undefined","title","description","idea_hash","visibility","status","score","analysis_summary","analysis_raw","created_at","updated_at","owner_anon","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fideas_2F_5Bid_5D_2Froute_ts_page_2Fapi_2Fideas_2F_5Bid_5D_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGaWRlYXMlMkYlNUJpZCU1RCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGaWRlYXMlMkYlNUJpZCU1RCUyRnJvdXRlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGaWRlYXMlMkYlNUJpZCU1RCUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGbm9vYiUyRkZvdW5kckNoZWNrJTJGYXBwJmFwcFBhdGhzPSUyRmFwaSUyRmlkZWFzJTJGJTVCaWQlNUQlMkZyb3V0ZSZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCE_3D_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap","getRequestContext","hashPassword","password","data","TextEncoder","encode","bytes","from","Uint8Array","crypto","subtle","digest","map","b","toString","padStart","join","verifyPassword","hashedPassword","hashed","createLucia","adapter","D1Adapter","session","Lucia","sessionExpiresIn","TimeSpan","sessionCookie","name","attributes","sameSite","secure","path","req","lucia","cookieHeader","headers","get","sessionId","readSessionCookie","validateSession","registerWithEmailPassword","email","first","userId","uuidv4","run","keyId","createSession","cookie","createSessionCookie","serialize","loginWithEmailPassword","hashed_password","user_id","logout","invalidateSession","createBlankSessionCookie"],"sourceRoot":""}