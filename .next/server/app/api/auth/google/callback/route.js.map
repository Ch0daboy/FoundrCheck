{"version":3,"file":"app/api/auth/google/callback/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/auth/google/callback/route.ts","webpack://_N_E/./app/api/auth/google/callback/route.ts?4b4a","webpack://_N_E/?a323","webpack://_N_E/./lib/env.ts","webpack://_N_E/./lib/lucia.ts"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { env as getEnv } from \"@/lib/env\";\nimport { createGoogleOAuth, createOrGetUserFromGoogle, createSessionForUser } from \"@/lib/lucia\";\nimport { decodeIdToken } from \"arctic\";\n\nexport const runtime = \"edge\";\n\nexport async function GET(request: Request) {\n  const env = getEnv();\n  const url = new URL(request.url);\n  const code = url.searchParams.get(\"code\");\n  const state = url.searchParams.get(\"state\");\n  \n  const cookieHeader = request.headers.get(\"cookie\") ?? \"\";\n  const storedState = cookieHeader\n    .split(\"; \")\n    .find(c => c.startsWith(\"google_oauth_state=\"))\n    ?.split(\"=\")[1];\n  const codeVerifier = cookieHeader\n    .split(\"; \")\n    .find(c => c.startsWith(\"google_code_verifier=\"))\n    ?.split(\"=\")[1];\n\n  if (!code || !state || !storedState || !codeVerifier || state !== storedState) {\n    return new Response(\"Invalid OAuth callback\", { status: 400 });\n  }\n\n  try {\n    const googleOAuth = createGoogleOAuth(env);\n    const tokens = await googleOAuth.validateAuthorizationCode(code, codeVerifier);\n    \n    // Decode ID token to get user info\n    const claims = decodeIdToken(tokens.idToken()) as {\n      email?: string;\n      name?: string;\n      sub?: string;\n    };\n    const googleUser = {\n      email: claims.email || '',\n      name: claims.name || '',\n      sub: claims.sub || ''\n    };\n    \n    if (!googleUser.email) {\n      throw new Error(\"No email provided by Google\");\n    }\n\n    // Create or get existing user\n    const userId = await createOrGetUserFromGoogle(env, googleUser);\n    \n    // Create session\n    const { cookie } = await createSessionForUser(env, userId);\n    \n    const redirectUrl = `${env.APP_URL || 'https://foundrcheck.com'}/profile`;\n    \n    return new Response(null, {\n      status: 302,\n      headers: {\n        Location: redirectUrl,\n        \"Set-Cookie\": [\n          cookie,\n          \"google_oauth_state=; HttpOnly; Secure; SameSite=Lax; Path=/; Max-Age=0\",\n          \"google_code_verifier=; HttpOnly; Secure; SameSite=Lax; Path=/; Max-Age=0\"\n        ].join(\", \")\n      }\n    });\n    \n  } catch (error) {\n    const redirectUrl = `${env.APP_URL || 'https://foundrcheck.com'}/?error=oauth_failed`;\n    return new Response(null, {\n      status: 302,\n      headers: {\n        Location: redirectUrl,\n        \"Set-Cookie\": [\n          \"google_oauth_state=; HttpOnly; Secure; SameSite=Lax; Path=/; Max-Age=0\",\n          \"google_code_verifier=; HttpOnly; Secure; SameSite=Lax; Path=/; Max-Age=0\"\n        ].join(\", \")\n      }\n    });\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/home/noob/FoundrCheck/app/api/auth/google/callback/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/auth/google/callback/route\",\n        pathname: \"/api/auth/google/callback\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/google/callback/route\"\n    },\n    resolvedPagePath: \"/home/noob/FoundrCheck/app/api/auth/google/callback/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/auth/google/callback/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fauth%2Fgoogle%2Fcallback%2Froute&page=%2Fapi%2Fauth%2Fgoogle%2Fcallback%2Froute&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fgoogle%2Fcallback%2Froute.ts&appDir=%2Fhome%2Fnoob%2FFoundrCheck%2Fapp&appPaths=%2Fapi%2Fauth%2Fgoogle%2Fcallback%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/auth/google/callback/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","import { getRequestContext } from \"@cloudflare/next-on-pages\";\n\nexport type Bindings = {\n  DB: D1Database;\n  IDEA_QUEUE: Queue;\n  PERPLEXITY_API_KEY: string;\n  PERPLEXITY_MODEL: string;\n  APP_TIMEZONE?: string;\n  RATE_LIMIT_DAILY?: string | number;\n  TURNSTILE_SECRET_KEY?: string;\n  NEXT_PUBLIC_TURNSTILE_SITE_KEY?: string;\n  GOOGLE_CLIENT_ID?: string;\n  GOOGLE_CLIENT_SECRET?: string;\n  APP_URL?: string;\n};\n\nexport function env(): Bindings {\n  return getRequestContext().env as unknown as Bindings;\n}\n\n\n","import { Lucia, TimeSpan } from \"lucia\";\nimport { D1Adapter } from \"@lucia-auth/adapter-sqlite\";\nimport { Google } from \"arctic\";\nimport type { Bindings } from \"@/lib/env\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Simple SHA-256 hashing for edge runtime compatibility\nasync function hashPassword(password: string): Promise<string> {\n  const data = new TextEncoder().encode(password);\n  const digest = await crypto.subtle.digest(\"SHA-256\", data);\n  const bytes = Array.from(new Uint8Array(digest));\n  return bytes.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\nasync function verifyPassword(hashedPassword: string, password: string): Promise<boolean> {\n  const hashed = await hashPassword(password);\n  return hashed === hashedPassword;\n}\n\nexport function createLucia(env: Bindings) {\n  const adapter = new D1Adapter(env.DB, { user: \"user\", session: \"session\" });\n  const appUrl = env.APP_URL || 'https://foundrcheck.com';\n  const isProduction = appUrl.includes('foundrcheck.com');\n  \n  const lucia = new Lucia(adapter, {\n    sessionExpiresIn: new TimeSpan(30, \"d\"),\n    sessionCookie: {\n      name: \"fc_session\",\n      attributes: {\n        sameSite: \"lax\",\n        secure: isProduction,\n        path: \"/\",\n        domain: isProduction ? \".foundrcheck.com\" : undefined,\n      },\n    },\n  });\n  return lucia;\n}\n\nexport function createGoogleOAuth(env: Bindings) {\n  if (!env.GOOGLE_CLIENT_ID || !env.GOOGLE_CLIENT_SECRET) {\n    throw new Error(\"Google OAuth credentials not configured\");\n  }\n  \n  const redirectUri = `${env.APP_URL || 'https://foundrcheck.com'}/api/auth/google/callback`;\n  \n  return new Google(env.GOOGLE_CLIENT_ID, env.GOOGLE_CLIENT_SECRET, redirectUri);\n}\n\nexport async function validateRequest(env: Bindings, req: Request) {\n  const lucia = createLucia(env);\n  const cookieHeader = req.headers.get(\"cookie\") ?? \"\";\n  const sessionId = lucia.readSessionCookie(cookieHeader);\n  if (!sessionId) return { user: null, session: null } as const;\n  return await lucia.validateSession(sessionId);\n}\n\nexport async function registerWithEmailPassword(env: Bindings, email: string, password: string) {\n  // Ensure email not taken\n  const exists = await env.DB.prepare(\"SELECT id FROM user WHERE email = ?\").bind(email).first();\n  if (exists) throw new Error(\"EMAIL_TAKEN\");\n\n  const userId = uuidv4();\n  await env.DB.prepare(\"INSERT INTO user (id, email) VALUES (?, ?)\").bind(userId, email).run();\n\n  const hashedPassword = await hashPassword(password);\n  const keyId = `email:${email}`;\n  await env.DB.prepare(\"INSERT INTO key (id, user_id, hashed_password) VALUES (?, ?, ?)\")\n    .bind(keyId, userId, hashedPassword)\n    .run();\n\n  await env.DB.prepare(\"INSERT OR IGNORE INTO user_profiles (id, email) VALUES (?, ?)\").bind(userId, email).run();\n\n  const lucia = createLucia(env);\n  const session = await lucia.createSession(userId, {});\n  const cookie = lucia.createSessionCookie(session.id).serialize();\n  return { userId, cookie } as const;\n}\n\nexport async function loginWithEmailPassword(env: Bindings, email: string, password: string) {\n  const keyId = `email:${email}`;\n  const row = await env.DB.prepare(\"SELECT user_id, hashed_password FROM key WHERE id = ?\")\n    .bind(keyId)\n    .first<{ user_id: string; hashed_password: string }>();\n  if (!row) throw new Error(\"INVALID_CREDENTIALS\");\n\n  const ok = await verifyPassword(row.hashed_password, password);\n  if (!ok) throw new Error(\"INVALID_CREDENTIALS\");\n\n  const lucia = createLucia(env);\n  const session = await lucia.createSession(row.user_id, {});\n  const cookie = lucia.createSessionCookie(session.id).serialize();\n  return { userId: row.user_id, cookie } as const;\n}\n\nexport async function logout(env: Bindings, req: Request) {\n  const lucia = createLucia(env);\n  const cookieHeader = req.headers.get(\"cookie\") ?? \"\";\n  const sessionId = lucia.readSessionCookie(cookieHeader);\n  if (sessionId) await lucia.invalidateSession(sessionId);\n  const blank = lucia.createBlankSessionCookie().serialize();\n  return blank;\n}\n\nexport async function createOrGetUserFromGoogle(env: Bindings, googleUser: any) {\n  const existingUser = await env.DB.prepare(\"SELECT id FROM user WHERE email = ?\")\n    .bind(googleUser.email)\n    .first<{ id: string }>();\n\n  if (existingUser) {\n    return existingUser.id;\n  }\n\n  // Create new user\n  const userId = uuidv4();\n  await env.DB.prepare(\"INSERT INTO user (id, email) VALUES (?, ?)\")\n    .bind(userId, googleUser.email)\n    .run();\n\n  // Create user profile\n  await env.DB.prepare(\"INSERT OR IGNORE INTO user_profiles (id, email) VALUES (?, ?)\")\n    .bind(userId, googleUser.email)\n    .run();\n\n  return userId;\n}\n\nexport async function createSessionForUser(env: Bindings, userId: string) {\n  const lucia = createLucia(env);\n  const session = await lucia.createSession(userId, {});\n  const cookie = lucia.createSessionCookie(session.id).serialize();\n  return { session, cookie };\n}\n\n\n"],"names":["module","exports","require","runtime","GET","request","env","getEnv","url","URL","code","searchParams","get","state","cookieHeader","headers","storedState","split","find","c","startsWith","codeVerifier","Response","status","googleOAuth","createGoogleOAuth","tokens","validateAuthorizationCode","claims","decodeIdToken","idToken","googleUser","email","name","sub","userId","createOrGetUserFromGoogle","cookie","createSessionForUser","redirectUrl","APP_URL","Location","join","error","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fauth_2Fgoogle_2Fcallback_2Froute_ts_page_2Fapi_2Fauth_2Fgoogle_2Fcallback_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGYXV0aCUyRmdvb2dsZSUyRmNhbGxiYWNrJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhdXRoJTJGZ29vZ2xlJTJGY2FsbGJhY2slMkZyb3V0ZSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmF1dGglMkZnb29nbGUlMkZjYWxsYmFjayUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGbm9vYiUyRkZvdW5kckNoZWNrJTJGYXBwJmFwcFBhdGhzPSUyRmFwaSUyRmF1dGglMkZnb29nbGUlMkZjYWxsYmFjayUyRnJvdXRlJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEIQ_3D_3D_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap","getRequestContext","hashPassword","password","data","TextEncoder","encode","bytes","from","Uint8Array","crypto","subtle","digest","map","b","toString","padStart","verifyPassword","hashedPassword","hashed","createLucia","adapter","D1Adapter","DB","user","session","isProduction","appUrl","includes","Lucia","sessionExpiresIn","TimeSpan","sessionCookie","attributes","sameSite","secure","path","domain","undefined","GOOGLE_CLIENT_ID","GOOGLE_CLIENT_SECRET","redirectUri","Google","validateRequest","req","lucia","sessionId","readSessionCookie","validateSession","registerWithEmailPassword","prepare","bind","first","uuidv4","run","keyId","createSession","createSessionCookie","id","serialize","loginWithEmailPassword","row","hashed_password","user_id","logout","invalidateSession","createBlankSessionCookie","existingUser"],"sourceRoot":""}